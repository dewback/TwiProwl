#!/usr/bin/ruby1.9.1
# -*- coding: utf-8 -*-
#
# TwiProwl - Twitter Notification Script with Prowl.
# Version: 0.7
#
# Copyright (c) 2009,2010 Takuo Kitame.
#
# You can redistribute it and/or modify it under the same term as Ruby.
#

$:.unshift File.dirname(__FILE__)

require 'rubygems'
require 'optparse'
require 'net/https'
require 'json'
require 'uri'
require 'yaml'
require 'logger'
require 'oauth'
require 'pstore'

STDOUT.sync = STDERR.sync = true

TWIPROWL_VERSION = "0.7.0"
$0 = "TwiProwl/#{TWIPROWL_VERSION}"

# define Process.daemon (ruby 1.9 feature)
unless Process.respond_to?(:daemon)
  def Process.daemon(nochdir = nil, noclose = nil)
    exit!(0) if fork
    Process.setsid
    Dir.chdir('/') unless nochdir
    unless noclose
      STDIN.reopen('/dev/null')  unless STDIN.closed?
      STDOUT.reopen('/dev/null') unless STDOUT.closed?
      STDERR.reopen('/dev/null') unless STDERR.closed?
    end
    0
  end
end

# oAuth fix for >= 1.9.0
if RUBY_VERSION >= "1.9.0"
  module HMAC
    class Base
      def set_key(key)
        key = @algorithm.digest(key) if key.size > @block_size
        key_xor_ipad = Array.new(@block_size, 0x36)
        key_xor_opad = Array.new(@block_size, 0x5c)
        key.bytes.each_with_index do |value, index|
          key_xor_ipad[index] ^= value
          key_xor_opad[index] ^= value
        end
        @key_xor_ipad = key_xor_ipad.pack('c*')
        @key_xor_opad = key_xor_opad.pack('c*')
        @md = @algorithm.new
        @initialized = true
      end
    end
  end
end

class TwiProwl
  API_BASE = "https://api.twitter.com/1/"
  LOGFILE = "twiprowl.log"
  PROWL_API_ADD = "https://prowl.weks.net/publicapi/add"
  MENTIONS = "#{API_BASE}statuses/mentions.json?"
  DIRECT_MESSAGES = "#{API_BASE}direct_messages.json?"
  RETWEETS = "#{API_BASE}statuses/retweets_of_me.json?"
  FOLLOWERS  = "#{API_BASE}followers/ids.json?screen_name=%s&cursor=%d"
  USER_SHOW  = "#{API_BASE}users/show/%s.json"
  RATE_LIMIT = "#{API_BASE}account/rate_limit_status.json"

  CONSUMER_KEY = 'nqjjOwQ207D1r3sPVgRhA'
  CONSUMER_SECRET = 'Al0rV0Ud4zskHXZLfoEecPNj18Rk0faOrbpcojDOtM'
  ACCESS_SITE = 'https://api.twitter.com'

  CheckInfo = Struct.new(:name, :last_id, :enable, :count, :interval, :priority, :followers, :req_auth, :thread)

  def initialize( global, config )
    @@conf = global
    _prowl_conf_validate( @@conf['Prowl'] )
    @mentions = CheckInfo.new( "Mentions", -1 )
    @direct   = CheckInfo.new( "Direct", -1 )
    @retweets = CheckInfo.new( "Retweets", -1 )
    @application = config['Application'] ? config['Application'] : "Twitter"

    @mentions.count = config['MentionsCount'] ? config['MentionsCount'] : 10
    @mentions.interval = config['MentionsInterval'] ? config['MentionsInterval'] : 300
    @mentions.priority = config['MentionsPriority'] ? config['MentionsPriority'] : 0
    @direct.count = config['DirectCount'] ? config['DirectCount'] : 10
    @direct.interval = config['DirectInterval'] ? config['DirectInterval'] : 600
    @direct.priority = config['DirectPriority'] ? config['DirectPriority'] : 0
    @retweets.count = config['RetweetsCount'] ? config['RetweetsCount'] : 10
    @retweets.interval = config['RetweetsInterval'] ? config['RetweetsInterval'] : 300
    @retweets.priority = config['RetweetsPriority'] ? config['RetweetsPriority'] : 0
    @user = config['User']
    pass = config['Pass']
    @use_proxy = config['UseProxy']
    @threshold = config['RateLimitThreshold'] ? config['RateLimitThreshold'] : 20
    @remotter = CheckInfo.new( "Remotter" )
    @remotter.interval = config['RemotterInterval'] ? config['RemotterInterval'] : 0
    @remotter.followers = Array.new
    @remotter.priority = config['RemotterPriority'] ? config['RemotterPriority'] : 0
    @remotter.req_auth = false

    process_xauth( @user, pass )
    rate_limit_status( true )
  end

  @@conf = Hash.new
  @@logger = nil
  @@prowl_conf = nil

  private
  def process_xauth( user, pass )

    pdbfile = File.join( ENV['HOME'], ".twiprowl.pdb" )
    access_token = nil
    access_token_secret = nil

    if File.exist?( pdbfile )
      pdb = PStore.new( pdbfile )
      pdb.transaction do
        if pdb.root?( :tokens ) and pdb[ :tokens ][ user ]
          access_token = pdb[ :tokens ][ user ][ :access_token ]
          access_token_secret = pdb[ :tokens ][ user ][ :access_token_secret ]
        end
      end
    end

    params = {
     :site => ACCESS_SITE,
     :proxy => @use_proxy ? @@prowl_conf["ProxyURI"] : nil
    }

    consumer = OAuth::Consumer.new( CONSUMER_KEY, CONSUMER_SECRET, params )
    begin
      if access_token && access_token_secret
        @access_token = OAuth::AccessToken.new(
          consumer, access_token, access_token_secret
        )
      end
    rescue
       print "Failed to getting Access Token.\n"
       @access_token = nil
    end
    unless @access_token
      unless @pass
        print "Failed to oAuth. Please add `Pass' into config file or...\n"
        print "Enter the password for #{user} now: "
        revertstty = `stty -g` rescue nil
        `stty -echo` rescue nil
        pass = gets.chomp.strip
        print "\n"
        `stty #{revertstty}` rescue nil
      end
      begin
        print "** Processing xAuth authorization for #{user}..."
        @access_token = consumer.get_access_token(nil, {}, {
          :x_auth_mode => "client_auth",
          :x_auth_username => user,
          :x_auth_password => pass,
         })
        print " done.\n"
        pdb = PStore.new( pdbfile )
        pdb.transaction do
          pdb[ :tokens ] = Hash.new unless pdb.root?( :tokens )
          pdb[ :tokens ][ user ] = {
            :access_token => @access_token.token,
            :access_token_secret => @access_token.secret
          }
          pdb.commit
        end
        File.chmod( 0600, File.join( pdbfile ) )
      rescue OAuth::Unauthorized
        print "Failed to OAuth due to wrong password or the server error.\n"
        exit 1
      end
    end
    print "You can/should remove `Pass' for #{user} from config file.\n" if pass
  end

  def rate_limit_status( auth = false )
    json, res = get_json( RATE_LIMIT, auth )
    if res.code == "200"
      @rate = json['remaining_hits']
      @reset_at = Time.at( json['reset_time_in_seconds'] )
    end
  end

  def post_escape( string )
    string.gsub(/([^ a-zA-Z0-9_.-]+)/) do
      '%' + $1.unpack('H2' * $1.bytesize).join('%').upcase
    end.tr(' ', '+')
  end

  def _prowl_conf_validate(val)
    return if @@prowl_conf
    @@prowl_conf = val
    unless @@prowl_conf.kind_of?(Hash)
      STDERR.printf "Configuration Error: Prowl section must be Hash.\n"
      exit 1
    end
    unless @@prowl_conf.has_key?('APIKey')
      STDERR.printf "Configuration Error: APIKey must be given.\n"
      exit 1
    end
    if @@prowl_conf.has_key?('ProxyURL')
       @@prowl_conf['ProxyURI'] = URI::parse(@@prowl_conf['ProxyURL'])
    end
    _init_logger()
  end

  def _init_logger
    if @@conf['LogDir']
      logdir = @@conf['LogDir']
      Dir.mkdir(logdir) unless File.exist?(logdir)
      file = File.join(logdir, LOGFILE)
      STDOUT.print "All logs will be written into #{file}.\n"
      @@logger = Logger.new(file, 'daily')
      @@logger.level = @@conf['Debug'] ? Logger::DEBUG : Logger::INFO
      @@logger.datetime_format = "%Y-%m-%d %H:%M:%S"
    else
      @@logger = nil
    end
  end

  def _log( severity, str )
    if @@logger
      @@logger.add( severity, str, @application )
    else
      format = "[%Y-%m-%d %H:%M:%S##{Process.pid}] #{@application} - #{str}\n"
      if severity == Logger::ERROR
        STDERR.print Time.now.strftime( format )
      else
        print Time.now.strftime( format )
      end
    end
  end

  def get_json( url, auth = false )
    uri = URI::parse( url )
    debug " #{@user} Check #{uri.request_uri}"
    begin
      if auth
        res = @access_token.get( url )
      else
        http = http_new( uri, @use_proxy )
        req = Net::HTTP::Get.new( uri.request_uri )
        res = http.request( req )
      end
      if res['X-RateLimit-Remaining']
        debug " #{@user} RateLimit: %d/%d Reset at %s" % [
                                                 res['X-RateLimit-Remaining'],
                                                 res['X-RateLimit-Limit'],
                                                 Time.at(res['X-RateLimit-Reset'].to_i).to_s
                                                ]
      end
    rescue 
      error "HTTP Get Error: #{$!}"
      return [ nil, res ]
    end
    return res.code == "200" ? [ JSON::parse( res.body ), res ] : [ nil, res ]
  end

  def check_followers( checkinfo )
    cursor = -1
    users = Array.new
    while cursor != 0
      info " #{@user} Checking: Followers: cursor=#{cursor}"
      url = FOLLOWERS % [ @user, cursor ]
      json, res = get_json( url, checkinfo.req_auth )
      if res.code == "401"
        checkinfo.req_auth = true
        json, res = get_json( url, checkinfo.req_auth )
      end
      return if json.nil?
      cursor = json['next_cursor']
      users.concat( json['ids'].map{ |id| "#{id}" } ) # .map { |u| "@#{u['screen_name']}" } )
    end
    debug " #{@user} Current followers: #{users.size}, Previous: #{checkinfo.followers.size}"
    if checkinfo.followers.size > 0
      diff = checkinfo.followers - users
      if diff.size > 0
        screen_names = Array.new
        diff.each do |id|
          url = USER_SHOW % [ id.to_s ]
          json, res = get_json( url )
          if json
            screen_names << "@#{json['screen_name']}"
          else
            screen_names << "ID:#{id}"
          end
        end
        if screen_names.size > 1
          b = screen_names.pop
          string = screen_names.join(", ")
          string += " and #{b}"
        else
          string = screen_names[0]
        end
        desc = string
        desc += (diff.size > 1 ? " have" : " has" ) + " unfollowed you..."
        prowl( :apikey => @@prowl_conf['APIKey'],
               :application=> @application,
               :event => "You've been unfollowed",
               :description => desc,
               :priority => checkinfo.priority
               )
      end
    end
    checkinfo.followers = users
  end

  public
  def debug(str)
    _log(Logger::DEBUG, str)
  end

  def error(str)
    _log(Logger::ERROR, str)
  end

  def info(str)
    _log(Logger::INFO, str)
  end

  def http_new( uri, use_proxy = true )
    if @@prowl_conf['ProxyURI'] and use_proxy
      pu = @@prowl_conf['ProxyURI']
      http = Net::HTTP::Proxy( pu.host, pu.port, pu.user, pu.password ).new( uri.host, uri.port )
    else
      http = Net::HTTP.new( uri.host, uri.port )
    end
    if uri.scheme == "https"
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    end
    return http
  end

  def prowl( params={} )
    begin
      info " #{@user} Prowling..."
      uri = URI::parse( PROWL_API_ADD )
      http = http_new( uri )
      request = Net::HTTP::Post.new( uri.request_uri )
      request.content_type = "application/x-www-form-urlencoded"
      query = params.map do |key, val| "#{key}=#{post_escape(val.to_s)}" end
      res = http.request( request, query.join( '&' ) )
      debug " #{@user} Prowl Response: #{res.code}"
    rescue
      error "Error while Prowling: #{$!}"
    end
  end

  def rate_limit_check( threshold, auth = true )
    return true if threshold == 0
    debug " #{@user} Current RateLimit Remaining: #{@rate}"
    return true if @rate > threshold
    rate_limit_status( auth )
    @rate > threshold
 end

  def check( reqstr, checkinfo )
    return unless rate_limit_check( @threshold )
    info " #{@user} Checking: #{checkinfo.name}"

    if checkinfo.last_id > 0
      reqstr += "since_id=#{checkinfo.last_id}"
      reqstr += "&count=#{checkinfo.count}"
    else
      reqstr += "count=1"
    end

    json, res = get_json( reqstr, true )
    @rate = res['X-RateLimit-Remaining'].to_i
    @reset_at = Time.at(res['X-RateLimit-Reset'].to_i)
    return if json.nil?

    json.reverse.each do |obj|

      screen_name = obj.has_key?('sender_screen_name') ? obj['sender_screen_name'] : obj['user']['screen_name']
      event = "#{checkinfo.name}: #{screen_name}"

      desc = obj['text']
      desc.gsub!(/&(amp|quot|gt|lt);/u) do
        match = $1.dup
        case match
        when 'amp'  then '&'
        when 'quot' then '"'
        when 'gt'   then '>'
        when 'lt'   then '<'
        else
          "&#{match};"
        end
      end

      if checkinfo.last_id < 0
        debug " #{@user} #{checkinfo.name}: last_id = #{obj['id']}"
      else
        debug " #{@user} Prowling: %s %s" % [ event, desc ]
        prowl( :apikey => @@prowl_conf['APIKey'],
               :application=> @application,
               :event => event,
               :description => desc,
               :priority => checkinfo.priority
               )
        sleep 2
      end
      checkinfo.last_id = obj['id']
    end
    return
  end

  def run
    # remotter
    if @remotter.interval > 0 &&
        ( @remotter.thread.nil? || !@remotter.thread.alive? )
      @remotter.thread = Thread.new do
        loop do
          begin
            check_followers( @remotter )
          rescue
            error "RemotterError: #{$!.to_s}"
            debug $!.backtrace.join("\n")
          end
          debug " #{@user} Remotter sleep: #{@remotter.interval} secs"
          sleep @remotter.interval
        end
      end
    end
    # Mentions
    if @mentions.interval > 0 &&
        ( @mentions.thread.nil? || !@mentions.thread.alive? )
      info " #{@user} Start thread for Mentions."
      @mentions.thread = Thread.new do
        loop do
          begin
            check( MENTIONS, @mentions )
            debug " #{@user} Mentions last_id: #{@mentions.last_id}"
          rescue
            error " MentionsError: " + $!.to_s
          end
          debug " #{@user} Mentions sleep: #{@mentions.interval} secs"
          sleep @mentions.interval
        end
      end
    end

    # DirectMessage
    if @direct.interval > 0 &&
        ( @direct.thread.nil? || !@direct.thread.alive? )
      info " #{@user} Start thread for DirectMessage."
      @direct.thread = Thread.new do
        loop do
          begin
            check( DIRECT_MESSAGES, @direct )
            debug " #{@user} Direct last_id: #{@direct.last_id}"
          rescue
            error " DirectError: " + $!.to_s
          end
          debug " #{@user} Direct sleep: #{@direct.interval} secs"
          sleep @direct.interval
        end
      end
    end
    # Retweets
    if @retweets.interval > 0 &&
        ( @retweets.thread.nil? || !@retweets.thread.alive? )
      info " #{@user} Start thread for Retweets."
      @retweets.thread = Thread.new do
        loop do
          begin
            check( RETWEETS, @retweets )
            debug " #{@user} Retweets last_id: #{@retweets.last_id}"
          rescue
            error " Retweets: " + $!.to_s
          end
          debug " #{@user} Retweets sleep: #{@retweets.interval} secs"
          sleep @retweets.interval
        end
      end
    end

  end

end

## __MAIN__

## command line options
ProgramConfig = Hash.new
opts = OptionParser.new
opts.on( "-c", "--config FILENAME", String, "Specify the config file." ) { |v| ProgramConfig[:config] = v }
opts.on( "-q", "--daemon",nil, "Enable daemon mode.") { |v| ProgramConfig[:daemon] = true }
opts.on( "-d", "--debug", nil, "Enable debug output." ) { |v| ProgramConfig[:debug] = true }
opts.version = TWIPROWL_VERSION
opts.program_name = "twiprowl"
opts.parse!( ARGV )

## config file
config_order = [
  File.join( ENV['HOME'], '.twiprowl.conf' ),
  File.join( Dir.pwd, 'twiprowl.conf' ),
  File.join( Dir.pwd, 'config.yml' ),
  File.join( File.dirname( __FILE__ ), 'twiprowl.conf' )
]

filename = nil
if ProgramConfig[:config]
  if File.exist?( ProgramConfig[:config] )
    filename = ProgramConfig[:config]
  else
    STDERR.print "Configuration file does not exist: #{ProgramConfig[:config]}\n"
    exit 1
  end
else
  config_order.each do |conf|
    next unless File.exist?( conf )
    filename = conf
    break
  end
end
if filename.nil?
  STDERR.print "No configuration file exist.\n"
  STDERR.print "File candidates are:\n"
  STDERR.print config_order.join("\n")
  STDERR.print "\n"
  exit 1
end

STDOUT.print "LoadConf: #{filename}\n" 
config = YAML.load_file( filename )
config["Debug"] = true if ProgramConfig[:debug]


accounts = Array.new
config['Accounts'].each do |account|
  ac = TwiProwl.new( config, account )
#  ac.run
  accounts.push ac
end

## Daemon mode
if ProgramConfig[:daemon] || config['Daemon'] 
  begin
    Process.daemon( true, true )
  rescue
    STDERR.print $!
    exit 1
  end
  STDOUT.print "Daemonized. PID=#{Process.pid}\n"
end

Signal.trap(:INT) {
  exit
}
Signal.trap(:TERM) {
  exit
}

print "TwiProwl is running.\n"
loop do
  accounts.each do |ac|
    ac.run
  end
  sleep 60
end

# __END__
