#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#
# TwiProwl - Twitter Notification Script with Prowl.
# Version: 1.1
#
# Copyright (c) 2009,2010 Takuo Kitame.
#
# You can redistribute it and/or modify it under the same term as Ruby.
#
STDOUT.sync = STDERR.sync = true

require 'rubygems'
require 'optparse'
require 'net/https'
require 'json'
require 'uri'
require 'yaml'
require 'logger'
require 'pstore'

$:.unshift( File::dirname( __FILE__ ) )
require 'compat'

TWIPROWL_VERSION = "1.5.1"
$0 = "TwiProwl/#{TWIPROWL_VERSION}"

class TwiProwl
  API_BASE = "https://api.twitter.com/1/"
  LOGFILE = "twiprowl.log"
  PROWL_API_ADD = "https://prowl.weks.net/publicapi/add"
  FOLLOWERS  = "#{API_BASE}followers/ids.json?screen_name=%s&cursor=%d"
  USER_SHOW  = "#{API_BASE}users/show/%s.json"
  RATE_LIMIT = "#{API_BASE}account/rate_limit_status.json"
  STREAM_URL = "https://userstream.twitter.com/2/user.json"

  CONSUMER_KEY = 'nqjjOwQ207D1r3sPVgRhA'
  CONSUMER_SECRET = 'Al0rV0Ud4zskHXZLfoEecPNj18Rk0faOrbpcojDOtM'
  ACCESS_SITE = 'https://api.twitter.com'

  CheckInfo = Struct.new( :name, :interval, :symbol,
                          :last_id, :enable, :count, :priority,
                          :followers, :ignore, :negative, :thread, :time )

  attr_accessor :thread, :stream_thread

  def initialize( global, config )
    @@conf = global
    _prowl_conf_validate( @@conf['Prowl'] )
    @application = config.key?( 'Application' ) ? config['Application'] : "Twitter"
    load_config( config, [ # name, interval( sec )
      @mentions = CheckInfo.new( "Mentions" ),
      @direct   = CheckInfo.new( "Direct" ),
      @retweets = CheckInfo.new( "Retweets" ),
      @membership = CheckInfo.new( "Membership" ),
      @unfollowed = CheckInfo.new( "Unfollowed", 1800 ),
      @favorite = CheckInfo.new( "Favorite" )
    ] )
    if config['RegexpMatch']
      @match = config['RegexpMatch']
    end
    @direct.symbol = Unicode::E103
    @membership.followers = Array.new
    @unfollowed.followers = Array.new

    @user = config['User']
    @use_proxy = config['UseProxy']
    @threshold = config.key?( 'RateLimitThreshold' ) ? config['RateLimitThreshold'] : 20
    process_xauth( @user )
    rate_limit_status( true )
    @shutdown = false
  end

  @@conf = Hash.new
  @@logger = nil
  @@prowl_conf = nil

  private
  def load_config( config, items )
    items.each do |checkinfo|
      # set default
      checkinfo.enable   = false
      checkinfo.last_id  = -1
      checkinfo.priority = 0
      checkinfo.count    = 10
      checkinfo.ignore   = true
      checkinfo.negative = false
      next unless conf = config[checkinfo.name]
      checkinfo.enable   = conf['Enable']   if conf.key?( 'Enable' )
      checkinfo.priority = conf['Priority'] if conf.key?( 'Priority' )
      checkinfo.count    = conf['Count']    if conf.key?( 'Count' )
      checkinfo.interval = conf['Interval'] if conf.key?( 'Interval' )
      checkinfo.ignore   = conf['IgnoreSelf'] if conf.key?( 'IgnoreSelf' )
      checkinfo.negative = conf['IgnoreNegative'] if conf.key?( 'IgnoreNegative' )
    end
  end

  def process_xauth( user )

    pdbfile = File.join( ENV['HOME'], ".twiprowl.pdb" )
    access_token = nil
    access_token_secret = nil

    if File.exist?( pdbfile )
      pdb = PStore.new( pdbfile )
      pdb.transaction do
        if pdb.root?( :tokens ) and pdb[ :tokens ][ user ]
          access_token = pdb[ :tokens ][ user ][ :access_token ]
          access_token_secret = pdb[ :tokens ][ user ][ :access_token_secret ]
        end
      end
    end

    params = {
     :site => ACCESS_SITE,
     :proxy => @use_proxy ? @@prowl_conf["ProxyURI"] : nil
    }

    @consumer = OAuth::Consumer.new( CONSUMER_KEY, CONSUMER_SECRET, params )
    begin
      if access_token && access_token_secret
        @access_token = OAuth::AccessToken.new(
          @consumer, access_token, access_token_secret
        )
      end
    rescue
       print "Failed to getting Access Token.\n"
       @access_token = nil
    end
    unless @access_token
      print "Enter the password for #{user}: "
      revertstty = `stty -g` rescue nil
      `stty -echo` rescue nil
      pass = gets.chomp.strip
      print "\n"
      `stty #{revertstty}` rescue nil
      begin
        print "** Processing xAuth authorization for #{user}..."
        @access_token = @consumer.get_access_token(nil, {}, {
          :x_auth_mode => "client_auth",
          :x_auth_username => user,
          :x_auth_password => pass,
         })
        print " done.\n"
        pdb = PStore.new( pdbfile )
        pdb.transaction do
          pdb[ :tokens ] = Hash.new unless pdb.root?( :tokens )
          pdb[ :tokens ][ user ] = {
            :access_token => @access_token.token,
            :access_token_secret => @access_token.secret
          }
          pdb.commit
        end
        File.chmod( 0600, File.join( pdbfile ) )
      rescue OAuth::Unauthorized
        print "Failed to OAuth due to wrong password or the server error.\n"
        exit 1
      end
    end
    @token = OAuth::Token.new( @access_token.token,
                               @access_token.secret )
  end

  def rate_limit_status( auth = false )
    json, res = get_json( RATE_LIMIT, auth )
    if res.code == "200"
      @rate = json['remaining_hits']
      @reset_at = Time.at( json['reset_time_in_seconds'] )
    end
  end

  def post_escape( string )
    string.gsub(/([^ a-zA-Z0-9_.-]+)/) do
      '%' + $1.unpack('H2' * $1.bytesize).join('%').upcase
    end.tr(' ', '+')
  end

  def unescape( text )
    text.gsub( /&(amp|quot|gt|lt);/u ) do
      match = $1.dup
      case match
      when 'amp'  then '&'
      when 'quot' then '"'
      when 'gt'   then '>'
      when 'lt'   then '<'
      else
        "&#{match};"
      end
    end unless text.nil? || text.empty?
  end

  def _prowl_conf_validate(val)
    return if @@prowl_conf
    @@prowl_conf = val
    unless @@prowl_conf.kind_of?( Hash )
      STDERR.printf "Configuration Error: Prowl section must be Hash.\n"
      exit 1
    end
    unless @@prowl_conf.has_key?( 'APIKey' )
      STDERR.printf "Configuration Error: APIKey must be given.\n"
      exit 1
    end
    if @@prowl_conf.has_key?( 'ProxyURL' )
       @@prowl_conf['ProxyURI'] = URI::parse( @@prowl_conf['ProxyURL'] )
    end
    _init_logger()
  end

  def _init_logger
    if @@conf['LogDir']
      logdir = @@conf['LogDir']
      Dir.mkdir( logdir ) unless File.exist?( logdir )
      file = File.join( logdir, LOGFILE )
      STDOUT.print "All logs will be written into #{file}.\n"
      @@logger = Logger.new( file, 'daily' )
      @@logger.level = @@conf['Debug'] ? Logger::DEBUG : Logger::INFO
      @@logger.datetime_format = "%Y-%m-%d %H:%M:%S"
    else
      @@logger = nil
    end
  end

  # logging
  def _log( severity, str )
    if @@logger
      @@logger.add( severity, str, "#{@application}@#{@user}" )
    else
      format = "[%Y-%m-%d %H:%M:%S##{Process.pid}]" 
      if severity == Logger::ERROR
        STDERR.print Time.now.strftime( format ) + " #{@application}@#{@user} - #{str}\n"

      else
        print Time.now.strftime( format ) + " #{@application}@#{@user} - #{str}\n"
      end
    end
  end

  def debug(str)
    _log(Logger::DEBUG, str)
  end

  def error(str)
    _log(Logger::ERROR, str)
  end

  def info(str)
    _log(Logger::INFO, str)
  end

  def http_new( uri, use_proxy = true )
    if @@prowl_conf['ProxyURI'] and use_proxy
      pu = @@prowl_conf['ProxyURI']
      http = Net::HTTP::Proxy( pu.host, pu.port, pu.user, pu.password ).new( uri.host, uri.port )
    else
      http = Net::HTTP.new( uri.host, uri.port )
    end
    if uri.scheme == "https"
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    end
    return http
  end

  def prowl( params={} )
    begin
      info "Prowling..."
      uri = URI::parse( PROWL_API_ADD )
      http = http_new( uri )
      request = Net::HTTP::Post.new( uri.request_uri )
      request.content_type = "application/x-www-form-urlencoded"
      query = params.map do |key, val| "#{key}=#{post_escape(val.to_s)}" end
      res = http.request( request, query.join( '&' ) )
      debug "Prowl Response: #{res.code}"
    rescue
      error "Error while Prowling: #{$!}"
    end
  end

  def rate_limit_check( threshold, auth = true )
    return true if threshold == 0
    debug "Current RateLimit Remaining: #{@rate}"
    return true if @rate > threshold
    rate_limit_status( auth )
    @rate > threshold
  end

  def get_json( url, auth = false )
    uri = URI::parse( url )
    debug "Check #{uri.request_uri}"
    begin
      if auth
        res = @access_token.get( url )
      else
        http = http_new( uri, @use_proxy )
        req = Net::HTTP::Get.new( uri.request_uri )
        res = http.request( req )
      end
      if res['X-RateLimit-Remaining']
        debug (auth ? "Auth" : "IP" ) + " RateLimit: %d/%d Reset at %s" % [
                                                 res['X-RateLimit-Remaining'],
                                                 res['X-RateLimit-Limit'],
                                                 Time.at(res['X-RateLimit-Reset'].to_i).strftime( "%Y-%m-%d %H:%M:%S" )
                                                ]
      end
    rescue
      error "HTTP Get Error: #{$!}"
      return [ nil, res ]
    end
    return res.code == "200" ? [ JSON::parse( res.body ), res ] : [ nil, res ]
  end

  # checking followers
  def check_followers( checkinfo )
    return unless checkinfo.enable
    return unless rate_limit_check( @threshold )
    cursor = -1
    users = Array.new
    while cursor != 0
      info "Checking: Followers: cursor=#{cursor}"
      url = FOLLOWERS % [ @user, cursor ]
      json, res = get_json( url, true )
      return if json.nil?
      cursor = json['next_cursor']
      users.concat( json['ids'].map{ |id| "#{id}" } ) # .map { |u| "@#{u['screen_name']}" } )
    end
    debug "Current followers: #{users.size}, Previous: #{checkinfo.followers.size}"
    if checkinfo.followers.size > 0
      diff = checkinfo.followers - users
      if diff.size > 0
        screen_names = Array.new
        rate = 150
        diff.each do |id|
          url = USER_SHOW % [ id.to_s ]
          json = nil
          if rate > @threshold
            json, res = get_json( url, false ) # don't use auth API rate
            rate = res['X-RateLimit-Remaining'] ? res['X-RateLimit-Remaining'].to_i : 0
          end 
          screen_names.push( json ? "@#{json['screen_name']}" : "ID:#{id}" )
        end
      
        if screen_names.size > 1
          b = screen_names.pop
          string = screen_names.join(", ")
          string += " and #{b}"
        else
          string = screen_names[0]
        end
        desc = string + (diff.size > 1 ? " have" : " has" ) + " unfollowed you..."

        prowl( :apikey => @@prowl_conf['APIKey'],
               :application=> @application,
               :event => "Unfollowed",
               :description => "#{Unicode::E023} #{desc}",
               :priority => checkinfo.priority
               )
      end
    end
    checkinfo.followers = users
  end

  def process_stream( json )
    mentions = json['entities'] ? json['entities']['user_mentions'] : nil
    retweets = json['retweeted_status']
    message  = json['direct_message']
    event    = json['event']
    if json['user']
      source = json['user']['screen_name']
    elsif json['source']
      source = json['source']['screen_name'] 
    else
      source = nil
    end

    desc = retweets ? retweets['text'] : json['text']
    desc = unescape( desc )

    # RT event
    if retweets and retweets['user']['screen_name'] == @user
      return if @retweets.ignore and source == @user
      desc = unescape( retweets['text'] )
      event = "Retweeted by @#{source}" 
      debug "Prowling: %s %s" % [ event, desc ]
      prowl( :apikey => @@prowl_conf['APIKey'],
             :application=> @application,
             :event => event,
             :description => "#{Unicode::E00F} #{desc}",
             :priority => @retweets.priority ) if @retweets.enable
      return
    end

    # mentions event   
    if mentions and mentions.size > 0 and
      mentions.find do |m| m['screen_name'] == @user end
      return if @mentions.ignore and source == @user
      desc = unescape( json['text'] )
      event = "Mentioned by @#{source}"
      debug "Prowling: %s %s" % [ event, desc ]
      prowl( :apikey => @@prowl_conf['APIKey'],
             :application=> @application,
             :event => event,
             :description => "#{Unicode::E10F} #{desc}",
             :priority => @mentions.priority ) if @mentions.enable
      return
    end

    # direct message
    if message and message['recipient_screen_name'] == @user and
      (!@direct.ignore or message['sender_screen_name'] != @user)
      desc = unescape( message['text'] )
      event = "DM from @#{message['sender_screen_name']}"
      debug "Prowling: %s %s" % [ event, desc ]
      prowl( :apikey => @@prowl_conf['APIKey'],
             :application=> @application,
             :event => event,
             :description => "#{Unicode::E103} #{desc}",
             :priority => @direct.priority ) if @direct.enable
      return
    end

    if @match and desc
      if retweets
        sname = retweets['user']['screen_name']
      else
        sname = source
      end
      @match.each do |m|
        next unless m['Enable']
        screen_name = m.key?( 'User' ) ? m['User'] : ".*"
        body_text   = m.key?( 'Text' ) ? m['Text'] : ".*"
        u = Regexp.new( screen_name, 'i')
        t = Regexp.new( body_text )
        if u =~ sname and t =~ desc
          debug "Prowling: RegexpMatch"
          prowl( :apikey => @@prowl_conf['APIKey'],
             :application=> @application,
             :event => "@#{source} says",
             :description => "#{Unicode::E317} #{desc}",
             :priority => m.key?( 'Priority' ) ? m['Priority'] : 0 )
          return
        end
      end
    end

    # Membership event
    case event
    when "list_member_added"
      if json['target']['screen_name'] == @user and @membership.enable and
        (!@membership.ignore or json['target_object']['user']['screen_name'] != @user)
        desc = "You have been added into: #{json['target_object']['full_name']}" 
        prowl( :apikey => @@prowl_conf['APIKey'],
               :application=> @application,
               :event => "List membership",
               :description => "#{Unicode::E337} #{desc}",
               :priority => @membership.priority )
      end
    when "list_member_removed"
      if json['target']['screen_name'] == @user and
        @membership.enable and !@membership.negative and
        (!@membership.ignore or json['target_object']['user']['screen_name'] != @user)
        desc = "You have been removed from: #{json['target_object']['full_name']}" 
        prowl( :apikey => @@prowl_conf['APIKey'],
               :application=> @application,
               :event => "List membership",
               :description => "#{Unicode::E333} #{desc}",
               :priority => @membership.priority ) 
      end
    when "favorite"
      target = json['target_object']['user']['screen_name']
      if target == @user and @favorite.enable and
        (!@favorite.ignore or source != @user)
        text = json['target_object']['text']
        desc = unescape( text )
        prowl( :apikey => @@prowl_conf['APIKey'],
               :application=> @application,
               :event => "Favorite by @#{source}",
               :description => "#{Unicode::E32F} #{desc}",
               :priority => @favorite.priority )
      end
    when "unfavorite"
      target = json['target_object']['user']['screen_name']
      if target == @user and @favorite.enable and
        !@favorite.negative and
        (!@favorite.ignore or source != @user)
        text = json['target_object']['text']
        desc = unescape( text )
        prowl( :apikey => @@prowl_conf['APIKey'],
               :application=> @application,
               :event => "Unfavorite by @#{source}",
               :description => "#{Unicode::E421} #{desc}",
               :priority => @favorite.priority )
      end
    else
      debug "Event: #{event}" unless event.nil? || event.empty?
    end
  end

  def stream_monitor
    debug "Checking with Streaming API."
    uri = URI::parse( STREAM_URL )
    http = http_new( uri, @use_proxy )
    request = Net::HTTP::Post.new( uri.request_uri )
    # request.set_form_data( { "replies" => "all" } )
    request.oauth!( http, @consumer, @token )
    begin
      buf = ''
      http.request( request ) do |res|
        raise RuntimeError, "Error on HTTP HTTP:#{res.code} #{res.to_s}" if res.
code.to_i != 200
        res.read_body do |str|
          buf << str
          @stream_error_count = 0
          buf.gsub!( /[\s\S]+?\r\n/ ) do |chunk|
            json = JSON::parse( chunk ) rescue next
            begin
              process_stream( json )
            rescue
              error( "BUG: error while process JSON" )
              error( $!.backtrace.join("\n") )
              error( $!.to_s )
            end
          end
        end
      end
    ensure
      http.finish
    end
  end

  public
  def run
    return if ( @thread and @thread.alive? ) or @shutdown
    return unless @unfollowed.enable
    info "Starting basic thread for \"#{@application}\"."
    @thread = Thread.new do 
      loop do
        check_followers( @unfollowed ) 
        sleep @unfollowed.interval 
      end # loop
    end
  end

  def stream_run
    return if ( @stream_thread and @stream_thread.alive? ) or @shutdown
    info "Starting streaming thread for \"#{@application}\"."
    @stream_thread = Thread.new do
      begin
        stream_monitor
      rescue
        Thread.self.kill if @shutdown
        error "Streaming Error: #{$!}"
        debug "Stream error count=#{@stream_error_count}"
        sleep 10 * (@stream_error_count += 1)
        retry
      end
    end
  end

  def shutdown
    @shutdown = true
    info "Killing all threads by shutdown request."
    (@stream_thread.kill; debug( "Streaming thread has been killed" )) if @stream_thread and @stream_thread.alive?
    (@thread.kill; debug( "Check thread has been killed" )) if @thread and @thread.alive?
  end
end

## __MAIN__

## command line options
ProgramConfig = Hash.new
opts = OptionParser.new
opts.on( "-c", "--config FILENAME", String, "Specify the config file." ) { |v| ProgramConfig[:config] = v }
opts.on( "-q", "--daemon",nil, "Enable daemon mode.") { |v| ProgramConfig[:daemon] = true }
opts.on( "-d", "--debug", nil, "Enable debug output." ) { |v| ProgramConfig[:debug] = true }
opts.version = TWIPROWL_VERSION
opts.program_name = "twiprowl"
opts.parse!( ARGV )

## config file
config_order = [
  File.join( ENV['HOME'], '.twiprowl.conf' ),
  File.join( Dir.pwd, 'twiprowl.conf' ),
  File.join( Dir.pwd, 'config.yml' ),
  File.join( File.dirname( __FILE__ ), 'twiprowl.conf' )
]

filename = nil
if ProgramConfig[:config]
  if File.exist?( ProgramConfig[:config] )
    filename = ProgramConfig[:config]
  else
    STDERR.print "Configuration file does not exist: #{ProgramConfig[:config]}\n"
    exit 1
  end
else
  config_order.each do |conf|
    next unless File.exist?( conf )
    filename = conf
    break
  end
end

if filename.nil?
  STDERR.print "No configuration file exist.\n"
  STDERR.print "File candidates are:\n"
  STDERR.print config_order.join("\n")
  STDERR.print "\n"
  exit 1
end

STDOUT.print "LoadConf: #{filename}\n" 
config = YAML.load_file( filename )
config["Debug"] = true if ProgramConfig[:debug]

accounts = Array.new
config['Accounts'].each do |account|
  accounts.push( TwiProwl.new( config, account ) )
end

## Daemon mode
if ProgramConfig[:daemon] || config['Daemon'] 
  begin
    Process.daemon( true, true )
  rescue
    STDERR.print $!
    exit 1
  end
  STDOUT.print "Daemonized. PID=#{Process.pid}\n"
end

Signal.trap(:INT) {
  accounts.each do |ac| ac.shutdown end
  exit
}
Signal.trap(:TERM) {
  accounts.each do |ac| ac.shutdown end
  exit
}

print "TwiProwl is running.\n"

# main loop thread
loop do
  accounts.each do |ac|
    ac.run
    ac.stream_run
  end
  sleep 60
end

# __END__
